AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 29
    Runtime: nodejs12.x
    Environment:
      Variables:
        TABLE_NAME: !Ref NotesTable

Resources:
  ###################################
  # Base stack
  ###################################
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          CognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  ###################################
  # Account stack
  ###################################

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam_api_gateway_cup_auth_cognito_user_pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      ClientName: sam_api_gateway_cup_auth_cognito_client
      CallbackURLs:
        - 'http://localhost:3000/'
      LogoutURLs:
        - 'http://localhost:3000/'
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO

  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref ApiGateway
      UserPoolId: !Ref CognitoUserPool

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs10.x
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  ###################################
  # Catalog stack
  ###################################

  CreateNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'Create-Notes'
      CodeUri: backend/catalog/create-notes
      Handler: handler.lambdaHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: '/note'
            Method: POST

  FetchNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'Fetch-Notes'
      CodeUri: backend/catalog/fetch-notes
      Handler: handler.lambdaHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: '/note'
            Method: GET

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Notes'
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: 'hashKey'
          AttributeType: 'S'
        # - AttributeName: 'sortKey'
        #   AttributeType: 'S'
      KeySchema:
        - AttributeName: 'hashKey'
          KeyType: 'HASH'
        # - AttributeName: 'sortKey'
        #   KeyType: 'RANGE'

Outputs:
  Region:
    Description: 'Region'
    Value: !Ref AWS::Region

  ApiId:
    Description: 'API ID'
    Value: !Ref ApiGateway

  ApiUrl:
    Description: 'API endpoint URL for Prod environment'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/'

  CognitoUserPoolId:
    Description: 'Cognito User Pool Id'
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: 'Cognito User Pool Client Id'
    Value: !Ref CognitoUserPoolClient
